<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->
    <!--创建Bean的三种方式-->
    <!--第一种方式：使用默认构造函数创建
            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建

    <bean id="accountService" class="com.yeqifu.service.impl.AccountServiceImpl"></bean>
    -->


    <!--第二种方式：使用普通工厂中的方法创建对象（使用某个类中方法创建对象，并存入spring容器中）

    <bean id="instanceFactory" class="com.yeqifu.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->

    <!--第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器中）

    <bean id="accountService" class="com.yeqifu.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!--bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：
                singleton:单例的（默认值）
                prototype:多例的
                request:作用于web应用的请求范围
                session:作用于web应用的会话范围
                global-session:作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session
    -->
    <!--bean对象的声明周期
        单例对象：scope="singleton"
        一个应用只有一个对象的实例。它的作用范围就是整个引用。
        生命周期：
                对象出生：创建容器时，对象就被创建了
                对象活着：只要容器在，对象一直活着
                对象死亡：销毁容器时，对象就被销毁了
                总结：单例对象的生命周期和容器相同
        多例对象：scope="prototype"
        每次访问对象时，都会重新创建对象实例。
        生命周期：
                对象出生：当使用对象时，创建新的对象实例。
                对象活着：只要对象在使用中，就一直活着。
                对象死亡：当对象长时间不用时，且没有被其它对象引用时，被 java 的垃圾回收器回收了。
    -->
    <bean id="accountService" class="com.yeqifu.service.impl.AccountServiceImpl" scope="singleton" init-method="init" destroy-method="destory"></bean>



</beans>